const audioScriptData = `
00:07
어 시작하겠습니다. 안녕하세요. 젤입니다. 어 MVC에 대해서 지금부터 설명을 드리겠습니다. 먼저 MVC라는 패턴은 왜 생겨난 걸까요? 저는 이 특정 개념이 만들어지게 된 배경과 이유를 알게 되면 그 개념의 핵심이 뭔지 알 수 있다고 생각합니다. MVC가 생겨나기 전에 상황을 가정해 볼게요 과거의 프로그래머들이 수많은 프로그램들을 만들었을 거예요. 그런데 이 프로그래머들이 코드가 많아지면 많아질수록 코드가 복잡해져서 코드를 파악하기도 힘들어지고 나중에 기능을 수정할 때마다 대부분의 코드를 갈아엎어야 하는 경험을 너무 많이 했던 거예요. 한 마디로 유지 보수가 너무 불편한 경우가 많았어요. 그러다가 프로그래머들이 코드를 계속해서 짜다 보니 어 이렇게 코드 구성을 하니 유지보수가 편하더라 하는 패턴들이 이 규칙성들이 조금씩 보이기 시작하는 거예요. 그래서 이제 그 패턴을 하나의 공식처럼 만들어서 논문으로 발표하게 됐고 어 그렇게 많은 프로그래머들 사이에서 MVC라는 패턴이 유명해지게 됐어요. 
01:03
요약하자면 이 MVC는 코드에 대한 유지보수를 어떻게 하면 편하게 할 수 있을까를 고민하다가 탄생하게 된 패턴 중 하나입니다. 한마디로 이 MVC가 생겨나게 된 핵심 이유는 이 유지보수 때문이에요. 그럼 지금부터 MVC의 전체 구조를 웹에 비유해서 MVC가 도대체 어떤 패턴인지 살짝 감만 잡아볼게요 먼저 사용자가 구글에 코딩이라고 검색을 합니다. 그러면 이 컨트롤러는 어 코딩에 대한 검색 결과 데이터를 달라고 모델한테 요청을 합니다. 그럼 이 모델은 검색 결과 데이터를 찾아서 컨트롤러한테 전달하게 되고 이 컨트롤러는 다시 뷰한테 전달합니다. 뷰는 사용자가 보는 UI에 검색결과 데이터를 이쁘게 넣어서 이제 사용자한테 보여줍니다. 여기서 이 MVC의 맛보기 구조를 보면서 중요한 건 이 모델과 뷰와 컨트롤러 역할을 기억하셔야 돼요. 어 다시 한번 볼게요 어 여기서 모델은 여기 데이터 데이터와 관련된 일을 하는 곳이에요.
01:57
그리고 이 컨텐츠 토롤러는 이 모델과 뷰와 중개자 역할을 하고 있는 걸 보실 수 있어요. 그리고 이 뷰는 사용자한테 보여지는 부분을 담당하는 곳이에요. 어 이렇게 일단 이걸 바탕으로 MVC의 역할을 다시 한번 정리를 해볼게요 모델은 데이터 관련된 부분 뷰는 사용자한테 보여지는 부분 컨트롤러는 모델과 뷰를 이어주는 부분입니다. 지금까지 설명한 내용은 MVC를 1번이라도 공부를 해보셨다면 들어보셨을 수도 있어요. 하지만 이 MVC에 대한 내용은 알고 있지만 실전에서 제대로 적용시킬 수 없다면 저는 죽어있는 이론이라고 생각을 해요. 그리고 이 지금까지 설명한 내용만을 알고 있으면 MVC를 나도 모르게 어기면서 코딩을 하는 경우가 생각보다 많이 발생합니다. 미션을 하시면서 이제 MVC를 잘못 구현해서 피드백을 받아 보신 분들도 꽤 있을 거예요. 
02:49
그래서 저는 이 MVC에 대한 깊은 이론적 지식을 다루는 것보다 실전에서 어떻게 하면 MVC를 잘 지키면서 코딩할 수 있는지에 대해 설명을 MVC를 지키면서 코딩하는 방법 지금부터 이 5가지 규칙에 대해서 말씀드릴 건데 어 이 규칙들을 지키다 보면 이 MVC 패턴에 맞게 코딩을 하실 수 있을 거예요. 지금부터 어떻게 해야 MVC 패턴을 지키면서 코딩을 할 수 있는지 알아볼게요 첫 번째로, 모델은 컨트롤러와 뷰에 의존하지 않아야 됩니다. 저는 근데 이 의존이라는 말이 너무 어려운 것 같애요. 쉽게 바꿔서 말할게요 모델 내부의 컨트롤러와 뷰에 관련된 코드가 있으면 안 됩니다. 그러니까 이 모델 클래스에서 컨트롤러와 뷰의 클래스를 임포트해서 사용하면은 안 되는 겁니다. 아마 이 MVC 패턴을 만든 사람들이 이 모델은 데이터와 관련된 부분이다. 보니 언제든 깔끔하고 정제된 데이터를 좀 꺼냈을 수 있게 이 뷰나 컨트롤의 코드를 섞어서 넣지 않고 데이터에 관련된 코드만 좀 깔끔하게 모아놓으려고 했던 것 같애요. 오른쪽 코드를 한번 봐볼게요 간단하게 이름과 나이를 가진 학생 클래스예요. 
03:49
컨트롤러나 뷰에 관련된 코드가 아예 없어요. 코드를 보시면은 이 한마디로 이 컨트롤러 뷰에 의존하지 않고 있습니다. 두 번째로, 이 뷰는 모델에만 의존해야 하고 컨트롤러에는 의존하면 안 됩니다. 쉽게 말해서 이 뷰 내부의 모델의 코드만 있을 수 있고 이 컨트롤러의 코드가 있으면 안 됩니다. 오른쪽 코드를 보시면 이 프린트 프로파일의 서드에 파라미터로 이 스튜런트를 받는 걸 볼 수 있어요. 그런데 이 스튜런트는 모델에 관련된 코드죠 뷰 내부의 모델에 관련된 코드는 있어도 상관없는 겁니다. 하지만 이 컨트롤에 관련된 코드는 있으면 안 됩니다. 자 세 번째는 이 뷰가 모델로부터 데이터를 받을 때는 사용자마다 다르게 보여줘야 되는 데이터에 대해서만 받아야 됩니다. 이 말이 무슨 말이냐면 실제 어플 서비스를 바탕으로 설명을 한번 드려볼게요 이 화면은 배달의 민족 어플에서 주문하기 화면이에요. 이 화면을 보시면 크게 2가지로 나눌 수 있어요. 사용자마다 다르게 보여줘야 되는 부분들과 사용자한테 일관되게 똑같이 보여줘야 되는 부분들로 나눌 수 있어요. 
04:48
이렇게 빨간색으로 칠해진 부분이 사용자마다 다르게 보여줘야 되는 부분들이에요. 정리하자면 이 뷰는 사용자한테 보이는 UI와 모델로부터 받은 데이터가 합쳐져 만들어진 화면이에요. 여기서 이제 중요한 게 모든 사용자한테 똑같이 보여줘야 되는 부분들 뭐 주문하기 글씨라던가 먼저 배달 정보라는 글씨라던가 어플 배경은 하얀색이라는 이런 정보들은 모델로부터 받으면 안 돼요. 모델로부터 받으면 안 되고 이 뷰가 자체적으로 가지고 있어야 되는 정보들이에요. 그러면 다시 한번 세 번째 규칙으로 돌아가 볼게요 이 세 번째 규칙은 뷰가 모델로부터 데이터를 받을 때는 사용자마다 다르게 보여줘야 하는 데이터에 대해서만 받아야 됩니다. 그럼 이제 그다음으로, 넘어갈게요 네 번째로, 이 컨트롤러 내부에는 모델과 뷰의 코드가 있을 수 있습니다. 왜냐하면, 이 컨트롤러는 모델과 뷰의 중개자 역할을 하면서 전체 로직을 구성하기 때문이에요. 다섯 번째로, 이 뷰가 모델로부터 데이터를 받을 때 반드시 컨트롤러에서 받아야 됩니다. 
05:42
이 오른쪽 컨트롤러의 코드를 보시면 모델인 스트리언트 클래스로부터 학생의 데이터를 만들어서 이 뷰에 프린트 프로파일 메소드한테 파라미터로 전달하는 걸 보실 수 있어요. 한마디로 이 뷰가 모델로부터 데이터를 받을 때는 이 컨트롤러 코드 내에서 코드 안에서만 받아야 되는 거예요. 지금까지 이제 제가 MVC를 지키기 위한 5가지 규칙들을 말씀드렸는데 그런데 과연 이 규칙들이 실전에서 적용할 수 있는지 이 이론이 과연 죽어있는 이론은 아닌지를 확인을 해볼게요 저희가 이제 1차 미션으로 했었던 자동차 경주 게임을 코드를 가지고 좀 설명을 드리려고 해요. 간단하게 설명하자면 경주할 자동차 이름을 입력받아서 시도를 할 때마다 각 자동차를 랜덤으로 이동시키는 그런 게임이에요. 이때 이제 이동한 정도는 저 대쉬 작대기 같은 모양으로 표현을 해서 실행 결과가 출력되는 게임 자동차 경주 게임을 구현한 코드의 일부를 갖고 왔어요. 
06:37
총 2개의 이제 박스가 있는데, 왼쪽에 큰 코드가 MVC를 지키지 않은 코드고 오른쪽에 MVC를 지킨 코드입니다. 어 지금부터 이제 조금 천천히 설명을 드릴 테니 코드를 차근차근 이제 해석하시면서 따라오시면 훨씬 좋을 것 같아요. 먼저 세 번째 규칙에 따르면 뷰는 모델로부터 사용자마다 다르게 보여줘야 하는 데이터에 대해서만 받아야 된다. 고 말씀을 드렸었어요. 하지만 이 왼쪽 편에 빨간 박스의 코드를 보시면 이 아웃풋 뷰 프린트 리절트 메서드의 파라미터로 자동차 경주 게임에서 움직인 정도를 나타내는 모양인 대시 모양을 파라미터로 입력받고 있어요. 그전에 이제 미션 보시면 저희 결과에서 출력하는 저 대시 모양을 가리키고 있어요. 어 근데 자동차의 움직임 정도를 나타내는 이 대시는 사용자에 따라서 달라지지 않는 그 부분이에요. 좀 더 풀어서 얘기하자면 자동차 게임을 하는 A라는 사용자도 분명히 게임을 했을 때 움직인 정도는 이 대시로 화면에 표시될 거고, 비라는 사용자도 분명 움직인 정도는 대시로 나올 거예요. 
07:36
그래서 이 부분은 사용자마다 동일하게 보여줘야 되는 데이터를 이 아웃풋 뷰의 프린트 리절트 메소드가 파라미터로 받았기 때문에 잘못된 코드인 겁니다. 지금 또 아까와 동일한 코드인데 이번에는 좀 다른 부분에 초점을 맞춰서 다시 보겠습니다. 첫 번째 규칙에 따르면 이 모델 내부의 컨트롤러와 뷰에 관련된 코드가 있으면 안 된다고 말씀을 드렸었어요. 하지만 왼쪽 편에 빨간 박스를 보시면 이 모델에 해당하는 카 클래스 내부의 뷰 관련 코드인 아웃풋 뷰 프린트 리저트 코드가 있는 것을 볼 수 있어요. 즉 이제 모델 내부에 뷰와 관련된 코드가 있으므로 첫 번째 규칙을 어기고 있는 거예요. 이 첫 번째 규칙을 지키기 위해 오른쪽과 같이 코드를 수정하다 보면 MVC를 지키는 패턴 바뀌게 됩니다. 혹시나 이 MVC를 어떻게 적용시켜야 되는지 헷갈리신다면 이 5가지의 규칙을 아까 제가 보여드렸던 것처럼 체크해보시고 적용시켜보세요. 그러면 MVC가 저절로 지켜지는 것을 느끼실 수 있을 겁니다. 
08:33
이상 MVC에 대한 발표를 마치겠습니다. 감사합니다. 
`;


export default audioScriptData;
